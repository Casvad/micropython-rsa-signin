from rsa import pkcs1
from rsa import key
import binascii


def jwt():
    print("Creating JWT...")

    private_key = key.PrivateKey.load_pkcs1(bytes("""{

    "n": 91955174137658452664107596502738419386740957422405277769905780882216104897984873029813285609576709631132272117551566930072008418438658275809155124902413959917352351173680207336533907037607667236686361050766196044663626281484747994157401719296443721876799532779543966008691055661280825884574414765444160020453,
    "e": 65537,
    "d": 78279127289011780736539097134256624770530814877031149530540664287636548701627722757118623131334736565922600385098523262107166175819655236086375092212119470363750831423628013281202257926236007778863296532120355141409885034401813217960388443903492486234434790765045143619828153533728593148779198071759819169833,
    "p": 11876988673962512769679768302118560465664911543638524534687339611997765394549745872371286429145461728006771367076871291784547592789191820073552573141491247,
    "q": 7742297030159539742614461385924393513781788012163530929776349294163633466495756394423326322390174774826198734989560186908716484759955139315150334304621099
}""", 'utf-8'))

    s = pkcs1.sign("""{"hello": "world", "other": [1]}""", private_key, 'SHA-256')
    h = """{"hello": "world", "other": [1]}"""

    print("0x" + binascii.hexlify(s).decode())
    print("=====")
    print("0x" + binascii.hexlify(h).decode())

    return s

